def sieve_of_eratosthenes(max_num):
    is_prime = [True] * (max_num + 1)
    is_prime[0] = is_prime[1] = False  

    for start in range(2, int(max_num**0.5) + 1):
        if is_prime[start]:
            for multiple in range(start*start, max_num + 1, start):
                is_prime[multiple] = False

    return [num for num, prime in enumerate(is_prime) if prime]

def generate_primes_in_range(low, high):
    if high < 2:
        return []
    
    import math 
    limit = int(math.sqrt(high)) + 1
    small_primes = sieve_of_eratosthenes(limit)

  
    is_prime_range = [True] * (high - low + 1)

    for prime in small_primes:
        
        start = max(prime*prime, low + (prime - low % prime) % prime)

        for j in range(start, high + 1, prime):
            is_prime_range[j - low] = False

    primes = []
    for i in range(max(low, 2), high + 1):
        if is_prime_range[i - low]:
            primes.append(i)

    return primes
    
low = 10
high = 50
print(generate_primes_in_range(low, high))
